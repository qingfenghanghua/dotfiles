" Auto Install Plug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !mkdir -p ~/.vim/autoload
  silent !curl -fLo ~/.vim/autoload/plug.vim
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" }}}

call plug#begin('~/.vim/bundle')

" Appearance {{{
" Dark
Plug 'w0ng/vim-hybrid'
Plug 'nanotech/jellybeans.vim'
" Plug 'kristijanhusak/vim-hybrid-material'
" Plug 'romainl/Apprentice'
" Plug 'connorholyday/vim-snazzy'
" Plug 'KeitaNakamura/neodark.vim'

" Light
" Plug 'google/vim-colorscheme-primary'
" Plug 'croaky/vim-colors-github'
" Plug 'saaguero/vim-github-colorscheme'

Plug 'Yggdroot/indentLine'

Plug 'vim-airline/vim-airline-themes'
Plug 'bling/vim-airline'
  let g:airline_theme='simple'
  let g:airline_powerline_fonts=1
  let g:airline#extensions#branch#enabled = 1
  let g:airline#extensions#branch#empty_message = ''
  let g:airline#extensions#syntastic#enabled = 1
  " control which sections get truncated and at what width. >
  let g:airline#extensions#default#section_truncate_width = {
      \   'b': 79,
      \   'x': 60,
      \   'y': 88,
      \   'z': 45,
      \ }
  " disable summary of changed hunks under source control.
  let g:airline#extensions#hunks#enabled = 0
" }}}

" Core {{{
Plug 'yianwillis/vimcdoc'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  }
Plug 'junegunn/fzf.vim'

Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-projectionist'

" Plug 'szw/vim-maximizer'
"   let g:maximizer_default_mapping_key = '<F5>'
Plug 'vim-scripts/bufkill.vim'
Plug 'vim-scripts/matchit.zip'
Plug 'tomtom/tcomment_vim'
Plug 'jiangmiao/auto-pairs'
" Plug 'sheerun/vim-polyglot'
" Plug 'will133/vim-dirdiff'
" Plug 'rickhowe/diffchar.vim'
" Plug 'chrisbra/vim-diff-enhanced'
Plug 'dyng/ctrlsf.vim'
  nnoremap <C-e> :CtrlSF<CR>
" Plug 'gabesoft/vim-ags'
  " nnoremap <C-y> :Ags <cword>

Plug 'kristijanhusak/vim-multiple-cursors'
  " Disable NeoComplete once start selecting multiple cursors
  function! Multiple_cursors_before()
      if exists(':NeoCompleteLock') == 2
          exe 'NeoCompleteLock'
      endif
  endfunction
  " Re-enable NeoComplete when the multiple selection is canceled
  function! Multiple_cursors_after()
    if exists(':NeoCompleteUnlock') == 2
      exe 'NeoCompleteUnlock'
    endif
  endfunction

Plug 'junegunn/vim-easy-align'
	" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
	xmap <CR>      <Plug>(EasyAlign)
Plug 'junegunn/vim-pseudocl'
" Improved /-search for Vim
Plug 'junegunn/vim-oblique'
" Find-N-Replace in Vim with live preview
Plug 'junegunn/vim-fnr'
" Peekaboo extends " and @ in normal mode and <CTRL-R> in insert mode so you can see the contents of the registers
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/rainbow_parentheses.vim'

Plug 'ConradIrwin/vim-bracketed-paste'

Plug 'Lokaltog/vim-easymotion'
  " easymotion prefix
  map ,      <Plug>(easymotion-prefix)
  " not case censitive
  let g:EasyMotion_smartcase = 1

" gof opens the file manager at the directory of the file you are currently editing in Vim.
" got opens the terminal at the directory of the file you are currently editing in Vim.
" Plug 'justinmk/vim-gtfo'

Plug 'scrooloose/nerdtree'
  " Make it colourful and pretty
  let NERDChristmasTree = 1
  " Size of the NERD tree
  let NERDTreeWinSize = 40
  " Disable 'bookmarks' and 'help'
  let NERDTreeMinimalUI = 1
  " Show hidden files
  let NERDTreeShowHidden = 1
  " Highlight the selected entry in the tree
  let NERDTreeHighlightCursorline = 1
  " Use a single click to fold/unfold directories
  let NERDTreeMouseMode = 2
  " Don't display these kinds of files in NERDTree
  let NERDTreeNodeDelimiter="\u00a0"
  let NERDTreeIgnore = [
      \ '\~$', '\.pyc$', '\.pyo$', '\.class$', '\.aps',
      \ '\.git', '\.hg', '\.svn', '\.sass-cache',
      \ '\.coverage$', '\.tmp$', '\.gitkeep$',
      \ '\.vcxproj', '\.bundle', '\.DS_Store$', '\tags$']
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jistr/vim-nerdtree-tabs'
  map <C-d> <Plug>NERDTreeTabsToggle<CR>
  nnoremap <C-u> :NERDTreeFind<CR>
  " Do not open NERDTree on startup
  let g:nerdtree_tabs_open_on_gui_startup = 0

Plug 'rhysd/clever-f.vim'
Plug 'kshenoy/vim-signature'
Plug 'tommcdo/vim-exchange'
Plug 'xtal8/traces.vim'
Plug 'liuchengxu/vim-which-key'
  nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
" Plug 'dhruvasagar/vim-table-mode'
"   let g:table_mode_corner="|"

" Tmux
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
  let g:VtrUseVtrMaps = 1
  let g:VtrStripLeadingWhitespace = 0
  let g:VtrClearEmptyLines = 0
  let g:VtrAppendNewline = 1
" Plug 'benmills/vimux'
"   nnoremap <Leader>vq :VimuxCloseRunner<CR>
"   nnoremap <Leader>vi :VimuxInterruptRunner<CR>
"   nnoremap <Leader>vs :VimuxInspectRunner<CR>
"   nnoremap <Leader>vv :VimuxZoomRunner<CR>
" }}}

" Programming {{{
" Plug 'w0rp/ale', { 'for': ['ruby', 'javascript'] }
  " let g:ale_lint_on_enter = 0
  " let g:ale_lint_on_text_changed = 'never'
" Plug 'ervandew/supertab'
Plug 'rizzatti/dash.vim'
Plug 'tpope/vim-dadbod'

" Plug 'editorconfig/editorconfig-vim'
  " let g:EditorConfig_exclude_patterns = ['fugitive://.*']

Plug 'AndrewRadev/splitjoin.vim'
Plug 'zhuochun/vim-dicts'
" Plug 'Shougo/neosnippet-snippets'
Plug 'honza/vim-snippets'
Plug 'Shougo/neosnippet.vim'
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#snippets_directory='~/dotfiles/vim/snippets'
  " Remove snippet markers after save
  autocmd! BufWrite * NeoSnippetClearMarkers
  " Plugin key-mappings
  imap <C-j>     <Plug>(neosnippet_expand_or_jump)
  smap <C-j>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-j>     <Plug>(neosnippet_expand_target)
Plug 'zerowidth/vim-copy-as-rtf', { 'on': 'CopyRTF' }
Plug 'chr4/nginx.vim'
Plug 'liuchengxu/vista.vim'
  let g:vista_fzf_preview = ['right:60%']
" }}}

" COC Setting {{{
Plug 'neoclide/coc.nvim', {'branch': 'release'}
  let g:coc_global_extensions =["coc-json", "coc-html", "coc-css", "coc-elixir", "coc-solargraph", "coc-lists", "coc-tailwindcss", "coc-vetur", "coc-highlight", "coc-prettier", "coc-snippets", "coc-eslint"]
  " You will have bad experience for diagnostic messages when it's default 4000.
  set updatetime=500
  " don't give |ins-completion-menu| messages.
  set shortmess+=c
  " always show signcolumns
  set signcolumn=yes

  " " Use tab for trigger completion with characters ahead and navigate.
  " " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use `[g` and `]g` to navigate diagnostics
  " nmap <silent> [g <Plug>(coc-diagnostic-prev)
  " nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " Remap keys for gotos
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gr <Plug>(coc-references)
  " nmap <silent> gy <Plug>(coc-type-definition)
  " nmap <silent> gi <Plug>(coc-implementation)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Remap for rename current word
  nmap <leader>rn <Plug>(coc-rename)
  " Create mappings for function text object, requires document symbols feature of languageserver.

  xmap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap if <Plug>(coc-funcobj-i)
  omap af <Plug>(coc-funcobj-a)

  " Add status line support, for integration with other plugin, checkout `:h coc-status`
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Using CocList
  " Show all coc lists
  nnoremap <silent> ma  :<C-u>CocList<cr>
  " Show diagnostics
  nnoremap <silent> md  :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent> me  :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent> mc  :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent> mo  :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent> ms  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> mj  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> mk  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent> mp  :<C-u>CocListResume<CR>
" }}}

" Text Objects {{{
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'               " al | il
Plug 'kana/vim-textobj-syntax'             " ay | iy
Plug 'kana/vim-textobj-indent'             " ai | ii
Plug 'kana/vim-textobj-lastpat'            " a/ | i/
Plug 'nelstrom/vim-textobj-rubyblock'      " ar | ir
Plug 'osyo-manga/vim-textobj-multiblock'   " ab | ib
Plug 'idbrii/textobj-word-column.vim'      " ac | ic
Plug 'Julian/vim-textobj-variable-segment' " av | iv
Plug 'bootleq/vim-textobj-rubysymbol'      " a: | i:
" }}}

" HTML/XML {{{
Plug 'othree/html5.vim'
" Plug 'gregsexton/MatchTag'
Plug 'mattn/emmet-vim'
  " enable emment functions in insert mode
  let g:user_emmet_mode = 'i'
" }}}

" Template Engines {{{
" Plug 'slim-template/vim-slim', { 'for': 'slim' }
" Plug 'tpope/vim-haml', { 'for': 'haml' }
" Plug 'mustache/vim-mustache-handlebars', { 'for': 'html.handlebars' }
" Plug 'honza/dockerfile.vim'
" }}}

" CSS {{{
  " make a  keyword issue: https://github.com/gko/vim-coloresque/issues/20
" Plug 'gorodinskiy/vim-coloresque', { 'for': ['css', 'scss', 'less'] }
Plug 'ap/vim-css-color', { 'for': ['css', 'scss', 'less'] }
Plug 'hail2u/vim-css3-syntax', { 'for': ['css', 'scss', 'less'] }
Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
" Plug 'groenewege/vim-less', { 'for': 'less' }
" Plug 'wavded/vim-stylus', { 'for': 'styl' }
" }}}

" JavaScript {{{
" Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
" Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
" Plug 'moll/vim-node'
" Plug 'othree/yajs.vim'
" Plug 'jelera/vim-javascript-syntax'
" Plug 'othree/javascript-libraries-syntax.vim'
"   let g:used_javascript_libs =
"     \ 'jquery,underscore,angularjs,angularui,jasmine,react,flux'
" Plug 'mitermayer/vim-prettier', {
" 	\ 'do': 'yarn install',
" 	\ 'for': ['javascript', 'typescript', 'css', 'less', 'scss'] }
"   let g:prettier#autoformat = 0
" Plug 'mxw/vim-jsx'
  " let g:jsx_ext_required = 0
Plug 'posva/vim-vue', { 'for': 'vue' }
" Plug 'leafgarland/typescript-vim'
" }}}

" PHP/Laravel {{{
" Plug 'StanAngeloff/php.vim', { 'for': 'php' }
" Plug 'xsbeats/vim-blade', { 'for': 'blade' }
" Plug 'adoy/vim-php-refactoring-toolbox'
" }}}

" Ruby/Rails {{{
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }
Plug 'tpope/vim-endwise'
" Plug 'tpope/vim-bundler'
" Plug 'tpope/vim-projectionist'
" Plug 'tpope/vim-rake'
Plug 'tpope/vim-rails'
Plug 'janko-m/vim-test', { 'for': ['ruby', 'elixir'] }
  let test#strategy = 'basic'
  " if exists('$TMUX')
  "   let test#strategy = 'vtr'
  " else
  "   let test#strategy = 'basic'
  " endif
Plug 'Keithbsmiley/rspec.vim', { 'for': 'ruby' }
" Plug 'ecomba/vim-ruby-refactoring', { 'for': 'ruby' }
Plug 'AndrewRadev/switch.vim', { 'for': ['ruby', 'coffee', 'haml'] }
" Plug 'griffinqiu/vim-i18n', { 'for': ['ruby', 'eruby'] }
" }}}

" Elixir {{{
Plug 'elixir-editors/vim-elixir', { 'for': ['ex', 'exs', 'eex'] }
Plug 'slashmili/alchemist.vim', { 'for': ['ex', 'exs', 'eex'] }
" }}}

" Golang {{{
" Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" }}}

" Git {{{
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'junegunn/gv.vim'
" Plug 'gregsexton/gitv', { 'on': 'Gitv' }
  nnoremap <leader>gv :GV<CR>
  nnoremap <leader>g4 :GV!<CR>
  nnoremap <leader>gc :Gcommit -v<CR>
  nnoremap <Leader>gs :Gstatus<CR>
  nnoremap <Leader>gd :Gdiff<CR>
  nnoremap <Leader>gb :Gblame<CR>
  nnoremap <Leader>gl :exe ':!cd ' . expand('%:p:h') . '; git lg'<CR>
  nnoremap <Leader>gr :Gread<CR>
  nnoremap <Leader>gw :Gwrite<CR>
  nnoremap <Leader>gp :Git push<CR>
  nnoremap <Leader>g- :Silent Git stash<CR>:e<CR>
  nnoremap <Leader>g+ :Silent Git stash pop<CR>:e<CR>
Plug 'mhinz/vim-signify'
  let g:signify_vcs_list = ['git']
" }}}

" Markdown {{{
Plug 'plasticboy/vim-markdown'
  let g:vim_markdown_conceal = 0
" Plug 'mzlogin/vim-markdown-toc'
" Plug 'junegunn/goyo.vim'
" Plug 'junegunn/limelight.vim'
"   let g:limelight_paragraph_span = 1
"   let g:limelight_priority = -1

" function! s:goyo_enter()
"   if has('gui_running')
"     set fullscreen
"     set background=light
"     set linespace=7
"   elseif exists('$TMUX')
"     silent !tmux set status off
"   endif
"   " hi NonText ctermfg=101
"   Limelight
" endfunction
"
" function! s:goyo_leave()
"   if has('gui_running')
"     set nofullscreen
"     set background=dark
"     set linespace=0
"   elseif exists('$TMUX')
"     silent !tmux set status on
"   endif
"   Limelight!
" endfunction
"
" autocmd! User GoyoEnter nested call <SID>goyo_enter()
" autocmd! User GoyoLeave nested call <SID>goyo_leave()
" nnoremap <Leader>md :Goyo<CR>
" }}}


call plug#end()
